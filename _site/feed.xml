<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>莫等闲、白了少年头，空悲切。
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 08 Mar 2018 14:31:08 +0800</pubDate>
    <lastBuildDate>Thu, 08 Mar 2018 14:31:08 +0800</lastBuildDate>
    <generator>Jekyll v3.7.3</generator>
    
      <item>
        <title>面向对象</title>
        <description>&lt;h2 id=&quot;1对象的定义&quot;&gt;&lt;strong&gt;1.&lt;/strong&gt;对象的定义&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;在ECMAScript-262中，对象被定义为“无序属性的集合，其属性可以包含基本值，对象或者函数”。也就是说，在JavaScript中，对象无非就是由一些列无序的key-value对组成。其中value可以是基本值，对象或者函数。&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // 这里的person就是一个对象
  var person = {
      name: 'Tom',
      age: 18,
      getName: function() {},
      parent: {}
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;创建对象&quot;&gt;创建对象&lt;/h3&gt;

&lt;p&gt;我们可以通过new的方式创建一个对象。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var obj = new Object();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;也可以通过对象字面量的形式创建一个简单的对象。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var obj = {};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当我们想要给我们创建的简单对象添加方法时，可以这样表示。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  // 可以这样
  var person = {};
  person.name = &quot;TOM&quot;;
  person.getName = function() {
        return this.name;
  }

  // 也可以这样
  var person = {
      name: &quot;TOM&quot;,
      getName: function() {
          return this.name;
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;访问对象的属性和方法&quot;&gt;访问对象的属性和方法&lt;/h3&gt;

&lt;p&gt;假如我们有一个简单的对象如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var person = {
      name: 'TOM',
      age: '20',
      getName: function() {
          return this.name
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;当我们想要访问他的name属性时，可以用如下两种方式访问。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  person.name
  // 或
  person['name']
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果我们想要访问的属性名是一个变量时，常常会使用第二种方式。例如我们要同时访问&lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;，可以这样写：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ['name', 'age'].forEach(function(item) {
      console.log(person[item]);
  })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2工厂模式&quot;&gt;&lt;strong&gt;2.&lt;/strong&gt;工厂模式&lt;/h2&gt;

&lt;p&gt;使用上面的方式创建对象很简单，但是在很多时候并不能满足我们的需求。就以person对象为例。假如我们在实际开发中，不仅仅需要一个名字叫做TOM的person对象，同时还需要另外一个名为Jake的person对象，虽然他们有很多相似之处，但是我们不得不重复写两次。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var perTom = {
      name: 'TOM',
      age: 20,
      getName: function() {
          return this.name
      }
  };

  var perJake = {
      name: 'Jake',
      age: 22,
      getName: function() {
          return this.name
      }
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们可以使用工厂模式的方式解决这个问题。顾名思义，工厂模式就是我们提供一个模子，然后通过这个模子复制出我们需要的对象。我们需要多少个，就复制多少个。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var createPerson = function (name, age) {
  // 声明一个对象，该对象就是工厂模式的模子
  var o = new Object();
      // 依次添加我们需要的属性和方法
      o.name = name;
      o.age = age;
      o.getName = function () {
          return this.name;
      }
      return o;
  }
  // 创建两个实例
  var perTom = createPerson('TOM', 20);
  var perJake = createPerson('Jake', 20);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;相信上面的代码并不难理解，也不用把工厂模式看得太过高大上。很显然，工厂模式帮助我们解决了重复代码上的麻烦，让我们可以写很少的代码，就能够创建很多个person对象。但是这里还有两个麻烦，需要我们注意。
这种方法的问题是，perTom和perJake之间没有内在的联系，不能反映出它们是同一个原型对象的实例。
第一个麻烦就是这样处理，我们没有办法识别对象实例的类型。使用instanceof可以识别对象的类型，如下例子：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var obj = {};
var foo = function() {}

console.log(obj instanceof Object);  // true
console.log(foo instanceof Function); // true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;因此在工厂模式的基础上，我们需要使用构造函数的方式来解决这个麻烦。&lt;/p&gt;

&lt;h2 id=&quot;3构造函数&quot;&gt;&lt;strong&gt;3.&lt;/strong&gt;构造函数&lt;/h2&gt;

&lt;p&gt;所谓”构造函数”，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。&lt;/p&gt;

&lt;p&gt;比如，猫的原型对象现在可以这样写，&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Cat(name,color){

        this.name=name;

        this.color=color;

    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们现在就可以生成实例对象了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;);

    var cat2 = new Cat(&quot;二毛&quot;,&quot;黑色&quot;);

    alert(cat1.name); // 大毛

    alert(cat1.color); // 黄色
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    alert(cat1.constructor == Cat); //true

    alert(cat2.constructor == Cat); //true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    alert(cat1 instanceof Cat); //true

    alert(cat2 instanceof Cat); //true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;构造函数方法很好用，但是存在一个浪费内存的问题。&lt;/p&gt;

&lt;p&gt;请看，我们现在为Cat对象添加一个不变的属性type（种类），再添加一个方法eat（吃）。那么，原型对象Cat就变成了下面这样：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Cat(name,color){

        this.name = name;

        this.color = color;

        this.type = &quot;猫科动物&quot;;

        this.eat = function(){
            alert(&quot;吃老鼠&quot;);
        };
        
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;还是采用同样的方法，生成实例：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;);

    var cat2 = new Cat (&quot;二毛&quot;,&quot;黑色&quot;);

    alert(cat1.type); // 猫科动物

    cat1.eat(); // 吃老鼠
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。
能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。&lt;/p&gt;

&lt;h2 id=&quot;4prototype模式原型模式&quot;&gt;&lt;strong&gt;4.&lt;/strong&gt;Prototype模式（原型模式）&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这意味着，我们可以把那些不变的属性和方法，直接定义在&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象上。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Cat(name, color) {

        this.name = name;

        this.color = color;

    }

    Cat.prototype.type = &quot;猫科动物&quot;;

    Cat.prototype.eat = function () {

        alert(&quot;吃老鼠&quot;);

    }    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，生成实例。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    var cat1 = new Cat(&quot;大黑&quot;, &quot;黑色&quot;);

    var cat1 = new Cat(&quot;大黄&quot;, &quot;黄色&quot;);

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这是所有实例的&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt;属性和&lt;code class=&quot;highlighter-rouge&quot;&gt;eat()&lt;/code&gt;方法，其实都是同一个内存地址，指向&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象，因此提高了运行效率。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    alert(cat1.eat == cat2.eat); //true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;5构造函数的继承&quot;&gt;&lt;strong&gt;5.&lt;/strong&gt;构造函数的继承&lt;/h2&gt;

&lt;p&gt;现在有一个“动物”对象的构造函数。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Animal (){
        this.species = &quot;动物&quot;;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;还有一个“猫”对象的构造函数。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Cat(name, color) {
        this.name = name;
        this.color = color;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;怎样使“猫”继承“动物”呢？&lt;/p&gt;

&lt;h3 id=&quot;1构造函数绑定&quot;&gt;&lt;strong&gt;（1）&lt;/strong&gt;构造函数绑定&lt;/h3&gt;

&lt;p&gt;第一种方法就是使用call或apply方法，将父对象的构造函数绑定在子对象上，即在子对象构造函数中加一行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Cat(name,color){
        Animal.apply(this, arguments); // arguments指参数数组[name,color]
        this.name = name;
        this.color = color;
    }
    var cat1 = new Cat(&quot;大黑&quot;, &quot;黑色&quot;)；
    console.log(cat1.species); //动物
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2prototype模式&quot;&gt;&lt;strong&gt;（2）&lt;/strong&gt;prototype模式&lt;/h3&gt;

&lt;p&gt;第二种方法更常见，使用prototype属性。&lt;/p&gt;

&lt;p&gt;Javascript规定，每一个构造函数都有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。&lt;/p&gt;

&lt;p&gt;如果“猫”的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象，指向一个Animal的实例，那么所有“猫”的实例，就能继承Animal了。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Cat.prototype = new Animal();

    Cat.prototype.constructor = Cat;

    var cat1 = new Cat(&quot;大黑&quot;, &quot;黑色&quot;);

    console.log(cat1.species); //动物

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;代码的第一行，我们将Cat的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象指向一个Animal的实例。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Cat.prototype = new Animal();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;相当于完全删除了&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象原先的值，然后赋予一个新值。
但是在这一行之前&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat.prototype.constructor&lt;/code&gt;是指向&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt;的，加了这一行后，&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat.prototype.constructor&lt;/code&gt;指向了&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;。
由于每一个实例也有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;属性，默认调用&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;属性。
这会导致构造函数&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt;生成实例的&lt;code class=&quot;highlighter-rouge&quot;&gt;constructor&lt;/code&gt;却指向了&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;,从而造成继承链的紊乱。&lt;/p&gt;

&lt;p&gt;所以第二行就是将&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat.prototype.constructor&lt;/code&gt;改回指向&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Cat.prototype.constructor = Cat;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;所以在编程中，如果替换了&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象，必须为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。&lt;/p&gt;

&lt;h3 id=&quot;3直接继承prototype&quot;&gt;&lt;strong&gt;（3）&lt;/strong&gt;直接继承prototype&lt;/h3&gt;
&lt;p&gt;第三种方法是对第二种方法的改进。由于&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;对象中，不变的属性都可以直接写入&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal.protype&lt;/code&gt;。所以，我们也可以让&lt;code class=&quot;highlighter-rouge&quot;&gt;Cat()&lt;/code&gt;跳过&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal()&lt;/code&gt;，直接继承&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal.prototype&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;现在，我们将&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;对象改写：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Animal (){ }

    Animal.prototype.species = &quot;动物&quot;；
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;然后，将Cat的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象，然后指向&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象，这样就完成了继承。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Cat.prototype = Animal.prototype;

    Cat.prototype.constructor = Cat;

    var cat1 = new Cat(&quot;大黄&quot;,&quot;黄色&quot;);

    alert(cat1.species); // 动物
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;与前一种方法相比，这样做的优点是效率比较高（不用执行和建立Animal的实例了），比较省内存。缺点是Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会影响到Animal.prototype。&lt;/p&gt;

&lt;p&gt;所以，上面的代码是有问题的。第二行&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    Cat.prototype.constructor = Cat;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这一句实际上把Animal.prototype对象的属性也改掉了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    alert(Animal.prototype.constructor); // Cat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4利用空对象作为中介&quot;&gt;&lt;strong&gt;（4）&lt;/strong&gt;利用空对象作为中介&lt;/h3&gt;
&lt;p&gt;由于直接继承prototype存在上述的缺点，所以就有第四种方法，利用一个空对象作为中介。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    var F = function (){};
    F.prototype = Animal.prototype;
    Cat.prototype = new F();
    Cat.prototype.constructor = Cat;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    alert(Animal.prototype.constructor); //Animal
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我们将上面的方法，封装成一个函数，便于使用。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function extend(Child, Parent) {
        var F = function() {};
        F.prototype = Parent.prototype;
        Child.prototype = new F();
        Child.prototype.constructor = Clild;
        Child.uber = Parent.prototype;
        &amp;lt;!-- 这里的意思是为子对象设置一个uber属性，直接指向父对象的prototype属性。这等于在子对象上打开一条通道，可以直接调用父对象的方法。这一行放在这里，只是为了实现继承的完备性，纯属备用性质 --&amp;gt;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用的时候&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    extend(Cat, Animal);
    var cat1 = new Cat(&quot;大黑&quot;, &quot;黑色&quot;);
    console.log(cat1.species); // 动物
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;5拷贝继承&quot;&gt;&lt;strong&gt;（5）&lt;/strong&gt;拷贝继承&lt;/h3&gt;

&lt;p&gt;上面采用prototype对象，实现继承。我们换一种思路，纯粹采用“拷贝”方法实现继承。简单说，如果把父对象的所有属性和方法，拷进子对象，不也能实现继承吗？这样我们就有了第五种方法。&lt;/p&gt;

&lt;p&gt;首先，还是把&lt;code class=&quot;highlighter-rouge&quot;&gt;Animal&lt;/code&gt;的所有不变属性，都放到它的prototype对象上。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function Animal(){}
    Animal.prototype.species = &quot;动物&quot;；
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后，再写一个函数，实现属性拷贝的目的。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function extend2(Child, Parent){
        var p = Parent.prototype;
        var c = Child.prototype;
        for(var i in p) {
            c[i] = p[i];
        }
        c.uber = p;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个函数的作用，就是将父对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象中的属性，一一拷贝给&lt;code class=&quot;highlighter-rouge&quot;&gt;Child&lt;/code&gt;对象的&lt;code class=&quot;highlighter-rouge&quot;&gt;prototype&lt;/code&gt;对象。
使用的时候&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    extend2(Cat, Animal);
    var cat1 = new Cat(&quot;大黑&quot;, &quot;黑色&quot;);
    console.log(cat1.species); // 动物
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 06 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/06/object.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/06/object.html</guid>
        
        
      </item>
    
      <item>
        <title>ECMAScript 6 入门</title>
        <description>&lt;p&gt;本文参考《&lt;a href=&quot;http://es6.ruanyifeng.com/&quot;&gt;ECMAScript6入门&lt;/a&gt;》（阮一峰 著）&lt;/p&gt;

&lt;h2 id=&quot;ecmascript-6-简介&quot;&gt;ECMAScript 6 简介&lt;/h2&gt;

&lt;h3 id=&quot;1-ecmascript-和-javascript-的关系&quot;&gt;&lt;strong&gt;1.&lt;/strong&gt; ECMAScript 和 JavaScript 的关系&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。&lt;/p&gt;

&lt;p&gt;该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。&lt;/p&gt;

&lt;p&gt;因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。&lt;/p&gt;

&lt;h3 id=&quot;2-es6-与-ecmascript-2015-的关系&quot;&gt;&lt;strong&gt;2.&lt;/strong&gt; ES6 与 ECMAScript 2015 的关系？&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ECMAScript 2015（简称 ES2015）这个词，也是经常可以看到的。它与 ES6 是什么关系呢？&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2011 年，ECMAScript 5.1 版发布后，就开始制定 6.0 版了。因此，ES6 这个词的原意，就是指 JavaScript 语言的下一个版本。&lt;/p&gt;

&lt;p&gt;但是，因为这个版本引入的语法功能太多，而且制定过程当中，还有很多组织和个人不断提交新功能。事情很快就变得清楚了，不可能在一个版本里面包括所有将要引入的功能。常规的做法是先发布 6.0 版，过一段时间再发 6.1 版，然后是 6.2 版、6.3 版等等。&lt;/p&gt;

&lt;p&gt;但是，标准的制定者不想这样做。他们想让标准的升级成为常规流程：任何人在任何时候，都可以向标准委员会提交新语法的提案，然后标准委员会每个月开一次会，评估这些提案是否可以接受，需要哪些改进。如果经过多次会议以后，一个提案足够成熟了，就可以正式进入标准了。这就是说，标准的版本升级成为了一个不断滚动的流程，每个月都会有变动。&lt;/p&gt;

&lt;p&gt;标准委员会最终决定，标准在每年的 6 月份正式发布一次，作为当年的正式版本。接下来的时间，就在这个版本的基础上做改动，直到下一年的 6 月份，草案就自然变成了新一年的版本。这样一来，就不需要以前的版本号了，只要用年份标记就可以了。&lt;/p&gt;

&lt;p&gt;ES6 的第一个版本，就这样在 2015 年 6 月发布了，正式名称就是《ECMAScript 2015 标准》（简称 ES2015）。2016 年 6 月，小幅修订的《ECMAScript 2016 标准》（简称 ES2016）如期发布，这个版本可以看作是 ES6.1 版，因为两者的差异非常小（只新增了数组实例的includes方法和指数运算符），基本上是同一个标准。根据计划，2017 年 6 月发布 ES2017 标准。&lt;/p&gt;

&lt;p&gt;因此，ES6 既是一个历史名词，也是一个泛指，含义是 5.1 版以后的 JavaScript 的下一代标准，涵盖了 ES2015、ES2016、ES2017 等等，而 ES2015 则是正式名称，特指该年发布的正式版本的语言标准。本书中提到 ES6 的地方，一般是指 ES2015 标准，但有时也是泛指“下一代 JavaScript 语言”。&lt;/p&gt;

&lt;h2 id=&quot;ecmascript-6-基本特性&quot;&gt;ECMAScript 6 基本特性&lt;/h2&gt;

&lt;h3 id=&quot;1-变量声明const和let&quot;&gt;&lt;strong&gt;1.&lt;/strong&gt; 变量声明const和let&lt;/h3&gt;

&lt;p&gt;ES6 新增了&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;命令，用来声明变量。它的用法类似于&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;，但是所声明的变量只在&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;命令所在的代码块内有效。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  {
    let a = 10;
    var b = 1;
  }

  a // ReferenceError: a is not defined.
  b // 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码在代码块之中，分别用&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;声明了两个变量。然后在代码块之外调用这两个变量，结果&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;声明的变量报错，&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;声明的变量返回了正确的值。这表明，&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;声明的变量只在它所在的代码块有效。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;循环的计数器，就很合适使用&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;命令。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  for (let i = 0; i &amp;lt; 10; i++) {
    // ...
  }

  console.log(i);
  // ReferenceError: i is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码中，计数器&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;只在&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;循环体内有效，在循环体外引用就会报错。&lt;/p&gt;

&lt;p&gt;下面的代码如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;，最后输出的是&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var a = [];
  for (var i = 0; i &amp;lt; 10; i++) {
    a[i] = function () {
      console.log(i);
    };
  }
  a[6](); // 10
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码中，变量&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;命令声明的，在全局范围内都有效，所以全局只有一个变量&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;。每一次循环，变量i的值都会发生改变，而循环内被赋给数组&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;的函数内部的&lt;code class=&quot;highlighter-rouge&quot;&gt;console.log(i)&lt;/code&gt;，里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;指向的就是全局的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;。也就是说，所有数组&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;的成员里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;，指向的都是同一个&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;，导致运行时输出的是最后一轮的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;的值，也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果想要输出&lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;，ES5告诉我们可以用闭包解决这个问题&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var a = []
  for (var i = 0; i &amp;lt; 10; i++) {
    a[i] = (function (i) {
      return function () {
        console.log(i);
      }
    })(i)
  }
  a[6](); //6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;，声明的变量仅在块级作用域内有效，最后输出的是 &lt;code class=&quot;highlighter-rouge&quot;&gt;6&lt;/code&gt;。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var a = [];
  for (let i = 0; i &amp;lt; 10; i++) {
    a[i] = function () {
      console.log(i);
    };
  }
  a[6](); // 6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码中，变量&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;是&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;声明的，当前的i只在本轮循环有效，所以每一次循环的&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;其实都是一个新的变量，所以最后输出的是6。你可能会问，如果每一轮循环的变量&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt; 引擎内部会记住上一轮循环的值，初始化本轮的变量&lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;时，就在上一轮循环的基础上进行计算。&lt;/p&gt;

&lt;p&gt;另外，&lt;code class=&quot;highlighter-rouge&quot;&gt;for&lt;/code&gt;循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  for (let i = 0; i &amp;lt; 3; i++) {
    let i = 'abc';
    console.log(i);
  }
  // abc
  // abc
  // abc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码正确运行，输出了 3 次abc。这表明函数内部的变量i与循环变量i不在同一个作用域，有各自单独的作用域。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;命令会发生“变量提升”现象，即变量可以在声明之前使用，值为&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。&lt;/p&gt;

&lt;p&gt;为了纠正这种现象，&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// var 的情况
console.log(foo); // 输出undefined
var foo = 2;

// let 的情况
console.log(bar); // 报错ReferenceError
let bar = 2;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上面代码中，变量&lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt;命令声明，会发生变量提升，即脚本开始运行时，变量&lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;已经存在了，但是没有值，所以会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;undefined&lt;/code&gt;。变量&lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;let&lt;/code&gt;命令声明，不会发生变量提升。这表示在声明它之前，变量&lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt;是不存在的，这时如果用到它，就会抛出一个错误。&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/05/es6.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/05/es6.html</guid>
        
        
      </item>
    
      <item>
        <title>使用jekyll搭建个人博客</title>
        <description>&lt;h2 id=&quot;准备好开始了吗从零开始构建自己的网站或为您的项目生成一个网站&quot;&gt;准备好开始了吗？从零开始构建自己的网站或为您的项目生成一个网站。&lt;/h2&gt;

&lt;p&gt;将Jekyll用作&lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt;的静态网站生成器。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;注册GitHub，建立仓库&lt;/li&gt;
  &lt;li&gt;jekyll环境搭建&lt;/li&gt;
  &lt;li&gt;定制个人博客&lt;/li&gt;
  &lt;li&gt;部署到github&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;注册github建立仓库&quot;&gt;注册GitHub，建立仓库&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 注册GitHub账号，创建一个名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;username .github.io&lt;/code&gt; 的新存储库，其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt; 是您在&lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub&lt;/a&gt;上的用户名（或组织名称）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/jekyll/user-repo@2x.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll环境搭建&quot;&gt;jekyll环境搭建&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 安装Ruby &lt;a href=&quot;https://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;官网安装&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- Mac一般默认安装了Ruby，这一步可以忽略。

- 注意：勾选 &quot;Add Ruby executables to your PATH&quot;，这样将自动完成环境变量的配置。 

- 安装路径不能包含空格
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;测试Ruby是否安装成功，执行命令&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -v&lt;/code&gt;，显示版本则代表安装成功。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 安装 DevKit &lt;a href=&quot;http://rubyinstaller.org/downloads/&quot;&gt;官网安装&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在命令窗口下切换到安装目录，并执行以下命令

- ruby dk.rb init
- ruby dk.rb install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; 安装Jekyll，输入：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- gem source 'https://rubygems.org'
- gem 'github-pages'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;墙内很容易出问题，无法安装，所以推荐使用推荐RubyChina镜像源。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//更换gem源
- gem sources --remove https://rubygems.org/
- gem sources -a http://gems.ruby-china.org/

//查看gem源
- gem sources -l

//更新gem
- gem update --system

//安装jekyll
- gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;定制个人博客&quot;&gt;定制个人博客&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 创建jekyll工程目录&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- jekyll new myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; 切换到工程目录，并开启服务&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- cd myblog
- jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;测试Jekyll是否正常开启，访问&lt;a href=&quot;http://localhost:4000&quot;&gt;localhost:4000&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; Jekyll使用Liquid语法 &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;查看官网文档&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- cd myblog
- jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; 自定义个人博客页面或下载 &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;Jekyll模板&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;部署到github&quot;&gt;部署到github&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; 克隆仓库到本地：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- git clone 项目地址
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt;提交代码到线上：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- git add .

- git commit -m &quot;提交jekyll默认页面&quot;

- git push origin master 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在浏览器里面输入网址：http://yourname.github.io 就可以看你的个人博客网站了。&lt;/p&gt;

&lt;p&gt;好啦，到这里你的个人博客就搭建完成啦°˖✧◝(⁰▿⁰)◜✧˖°&lt;/p&gt;

&lt;p&gt;我的博客的&lt;a href=&quot;https://github.com/GuyYQ/GuyYQ.github.io&quot;&gt;源代码&lt;/a&gt;就在这里啦 
喜欢就star一下哦&lt;/p&gt;

</description>
        <pubDate>Thu, 01 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/01/jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/01/jekyll.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome To Jekyll</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Sun, 04 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/04/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/04/welcome-to-jekyll.html</guid>
        
        
      </item>
    
      <item>
        <title>Some articles are just so long they deserve a really long title to see if things will break well</title>
        <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;

&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce bibendum neque eget nunc mattis eu sollicitudin enim tincidunt. Vestibulum lacus tortor, ultricies id dignissim ac, bibendum in velit. Proin convallis mi ac felis pharetra aliquam. Curabitur dignissim accumsan rutrum. In arcu magna, aliquet vel pretium et, molestie et arcu. Mauris lobortis nulla et felis ullamcorper bibendum. Phasellus et hendrerit mauris. Proin eget nibh a massa vestibulum pretium. Suspendisse eu nisl a ante aliquet bibendum quis a nunc. Praesent varius interdum vehicula. Aenean risus libero, placerat at vestibulum eget, ultricies eu enim. Praesent nulla tortor, malesuada adipiscing adipiscing sollicitudin, adipiscing eget est.&lt;/p&gt;
</description>
        <pubDate>Sat, 03 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/03/super-long-article.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/03/super-long-article.html</guid>
        
        
      </item>
    
      <item>
        <title>Markdown Cheatsheet</title>
        <description>&lt;p&gt;From &lt;a href=&quot;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&quot;&gt;adam-p/markdown-here&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;#headers&quot;&gt;Headers&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#emphasis&quot;&gt;Emphasis&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#lists&quot;&gt;Lists&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#links&quot;&gt;Links&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#images&quot;&gt;Images&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#code&quot;&gt;Code and Syntax Highlighting&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#tables&quot;&gt;Tables&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#blockquotes&quot;&gt;Blockquotes&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#html&quot;&gt;Inline HTML&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#hr&quot;&gt;Horizontal Rule&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#lines&quot;&gt;Line Breaks&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;#videos&quot;&gt;Youtube videos&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;headers&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;headers&quot;&gt;Headers&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;# H1
## H2
### H3
#### H4
##### H5
###### H6

Alternatively, for H1 and H2, an underline-ish style:

Alt-H1
======

Alt-H2
------
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;h1&quot;&gt;H1&lt;/h1&gt;
&lt;h2 id=&quot;h2&quot;&gt;H2&lt;/h2&gt;
&lt;h3 id=&quot;h3&quot;&gt;H3&lt;/h3&gt;
&lt;h4 id=&quot;h4&quot;&gt;H4&lt;/h4&gt;
&lt;h5 id=&quot;h5&quot;&gt;H5&lt;/h5&gt;
&lt;h6 id=&quot;h6&quot;&gt;H6&lt;/h6&gt;

&lt;p&gt;Alternatively, for H1 and H2, an underline-ish style:&lt;/p&gt;

&lt;h1 id=&quot;alt-h1&quot;&gt;Alt-H1&lt;/h1&gt;

&lt;h2 id=&quot;alt-h2&quot;&gt;Alt-H2&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;emphasis&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;emphasis&quot;&gt;Emphasis&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Emphasis, aka italics, with *asterisks* or _underscores_.

Strong emphasis, aka bold, with **asterisks** or __underscores__.

Combined emphasis with **asterisks and _underscores_**.

Strikethrough uses two tildes. ~~Scratch this.~~
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Emphasis, aka italics, with &lt;em&gt;asterisks&lt;/em&gt; or &lt;em&gt;underscores&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Strong emphasis, aka bold, with &lt;strong&gt;asterisks&lt;/strong&gt; or &lt;strong&gt;underscores&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Combined emphasis with &lt;strong&gt;asterisks and &lt;em&gt;underscores&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Strikethrough uses two tildes. &lt;del&gt;Scratch this.&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lists&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;(In this example, leading and trailing spaces are shown with with dots: ⋅)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;1. First ordered list item
2. Another item
⋅⋅* Unordered sub-list.
1. Actual numbers don't matter, just that it's a number
⋅⋅1. Ordered sub-list
4. And another item.

⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).

⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅
⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅
⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)

* Unordered list can use asterisks
- Or minuses
+ Or pluses
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
  &lt;li&gt;First ordered list item&lt;/li&gt;
  &lt;li&gt;Another item
    &lt;ul&gt;
      &lt;li&gt;Unordered sub-list.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Actual numbers don’t matter, just that it’s a number&lt;/li&gt;
  &lt;li&gt;Ordered sub-list&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;And another item.&lt;/p&gt;

    &lt;p&gt;You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).&lt;/p&gt;

    &lt;p&gt;To have a line break without a paragraph, you will need to use two trailing spaces.&lt;br /&gt;
Note that this line is separate, but within the same paragraph.&lt;br /&gt;
(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;Unordered list can use asterisks&lt;/li&gt;
  &lt;li&gt;Or minuses&lt;/li&gt;
  &lt;li&gt;Or pluses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;links&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;There are two ways to create links.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;[I'm an inline-style link](https://www.google.com)

[I'm an inline-style link with title](https://www.google.com &quot;Google's Homepage&quot;)

[I'm a reference-style link][Arbitrary case-insensitive reference text]

[I'm a relative reference to a repository file](../blob/master/LICENSE)

[You can use numbers for reference-style link definitions][1]

Or leave it empty and use the [link text itself].

URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or &amp;lt;http://www.example.com&amp;gt; and sometimes
example.com (but not on Github, for example).

Some text to show that the reference links can follow later.

[arbitrary case-insensitive reference text]: https://www.mozilla.org
[1]: http://slashdot.org
[link text itself]: http://www.reddit.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot;&gt;I’m an inline-style link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com&quot; title=&quot;Google's Homepage&quot;&gt;I’m an inline-style link with title&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.mozilla.org&quot;&gt;I’m a reference-style link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../blob/master/LICENSE&quot;&gt;I’m a relative reference to a repository file&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://slashdot.org&quot;&gt;You can use numbers for reference-style link definitions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Or leave it empty and use the &lt;a href=&quot;http://www.reddit.com&quot;&gt;link text itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;URLs and URLs in angle brackets will automatically get turned into links.
http://www.example.com or &lt;a href=&quot;http://www.example.com&quot;&gt;http://www.example.com&lt;/a&gt; and sometimes
example.com (but not on Github, for example).&lt;/p&gt;

&lt;p&gt;Some text to show that the reference links can follow later.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;images&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;images&quot;&gt;Images&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Here's our logo (hover to see the title text):

Inline-style:
![alt text](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 1&quot;)

Reference-style:
![alt text][logo]

[logo]: https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png &quot;Logo Title Text 2&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s our logo (hover to see the title text):&lt;/p&gt;

&lt;p&gt;Inline-style:
&lt;img src=&quot;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Reference-style:
&lt;img src=&quot;https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png&quot; alt=&quot;alt text&quot; title=&quot;Logo Title Text 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;code&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;code-and-syntax-highlighting&quot;&gt;Code and Syntax Highlighting&lt;/h2&gt;

&lt;p&gt;Code blocks are part of the Markdown spec, but syntax highlighting isn’t. However, many renderers – like Github’s and &lt;em&gt;Markdown Here&lt;/em&gt; – support syntax highlighting. Which languages are supported and how those language names should be written will vary from renderer to renderer. &lt;em&gt;Markdown Here&lt;/em&gt; supports highlighting for dozens of languages (and not-really-languages, like diffs and HTTP headers); to see the complete list, and how to write the language names, see the &lt;a href=&quot;http://softwaremaniacs.org/media/soft/highlight/test.html&quot;&gt;highlight.js demo page&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Inline `code` has `back-ticks around` it.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inline &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; has &lt;code class=&quot;highlighter-rouge&quot;&gt;back-ticks around&lt;/code&gt; it.&lt;/p&gt;

&lt;p&gt;Blocks of code are either fenced by lines with three back-ticks &lt;code&gt;```&lt;/code&gt;, or are indented with four spaces. I recommend only using the fenced code blocks – they’re easier and only they support syntax highlighting.&lt;/p&gt;

&lt;pre lang=&quot;no-highlight&quot;&gt;&lt;code&gt;```javascript
var s = &quot;JavaScript syntax highlighting&quot;;
alert(s);
```

```python
s = &quot;Python syntax highlighting&quot;
print s
```

```
No language indicated, so no syntax highlighting.
But let's throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
```
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;JavaScript syntax highlighting&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Python syntax highlighting&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;No language indicated, so no syntax highlighting in Markdown Here (varies on Github).
But let's throw in a &amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a name=&quot;tables&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;tables&quot;&gt;Tables&lt;/h2&gt;

&lt;p&gt;Tables aren’t part of the core Markdown spec, but they are part of GFM and &lt;em&gt;Markdown Here&lt;/em&gt; supports them. They are an easy way of adding tables to your email – a task that would otherwise require copy-pasting from another application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;Colons can be used to align columns.

| Tables        | Are           | Cool  |
| ------------- |:-------------:| -----:|
| col 3 is      | right-aligned | $1600 |
| col 2 is      | centered      |   $12 |
| zebra stripes | are neat      |    $1 |

There must be at least 3 dashes separating each header cell.
The outer pipes (|) are optional, and you don't need to make the
raw Markdown line up prettily. You can also use inline Markdown.

Markdown | Less | Pretty
--- | --- | ---
*Still* | `renders` | **nicely**
1 | 2 | 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Colons can be used to align columns.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Tables&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Are&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Cool&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;col 3 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;right-aligned&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1600&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;col 2 is&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;centered&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$12&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zebra stripes&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;are neat&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;$1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;There must be at least 3 dashes separating each header cell. The outer pipes (&lt;/td&gt;
      &lt;td&gt;) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Markdown&lt;/th&gt;
      &lt;th&gt;Less&lt;/th&gt;
      &lt;th&gt;Pretty&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;em&gt;Still&lt;/em&gt;&lt;/td&gt;
      &lt;td&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;renders&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;nicely&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&quot;blockquotes&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;blockquotes&quot;&gt;Blockquotes&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;gt; Blockquotes are very handy in email to emulate reply text.
&amp;gt; This line is part of the same quote.

Quote break.

&amp;gt; This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Blockquotes are very handy in email to emulate reply text.
This line is part of the same quote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Quote break.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can &lt;em&gt;put&lt;/em&gt; &lt;strong&gt;Markdown&lt;/strong&gt; into a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&quot;html&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;inline-html&quot;&gt;Inline HTML&lt;/h2&gt;

&lt;p&gt;You can also use raw HTML in your Markdown, and it’ll mostly work pretty well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;lt;dl&amp;gt;
  &amp;lt;dt&amp;gt;Definition list&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;Is something people use sometimes.&amp;lt;/dd&amp;gt;

  &amp;lt;dt&amp;gt;Markdown in HTML&amp;lt;/dt&amp;gt;
  &amp;lt;dd&amp;gt;Does *not* work **very** well. Use HTML &amp;lt;em&amp;gt;tags&amp;lt;/em&amp;gt;.&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;dl&gt;
  &lt;dt&gt;Definition list&lt;/dt&gt;
  &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;

  &lt;dt&gt;Markdown in HTML&lt;/dt&gt;
  &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;a name=&quot;hr&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;horizontal-rule&quot;&gt;Horizontal Rule&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Three or more...

---

Hyphens

***

Asterisks

___

Underscores
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Three or more…&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Hyphens&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Asterisks&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Underscores&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;lines&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;line-breaks&quot;&gt;Line Breaks&lt;/h2&gt;

&lt;p&gt;My basic recommendation for learning how line breaks work is to experiment and discover – hit &amp;lt;Enter&amp;gt; once (i.e., insert one newline), then hit it twice (i.e., insert two newlines), see what happens. You’ll soon learn to get what you want. “Markdown Toggle” is your friend.&lt;/p&gt;

&lt;p&gt;Here are some things to try out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Here's a line for us to start with.

This line is separated from the one above by two newlines, so it will be a *separate paragraph*.

This line is also a separate paragraph, but...
This line is only separated by a single newline, so it's a separate line in the *same paragraph*.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s a line for us to start with.&lt;/p&gt;

&lt;p&gt;This line is separated from the one above by two newlines, so it will be a &lt;em&gt;separate paragraph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;This line is also begins a separate paragraph, but…&lt;br /&gt;
This line is only separated by a single newline, so it’s a separate line in the &lt;em&gt;same paragraph&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;(Technical note: &lt;em&gt;Markdown Here&lt;/em&gt; uses GFM line breaks, so there’s no need to use MD’s two-space line breaks.)&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;videos&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;youtube-videos&quot;&gt;Youtube videos&lt;/h2&gt;

&lt;p&gt;They can’t be added directly but you can add an image with a link to the video like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;&amp;lt;a href=&quot;http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=YOUTUBE_VIDEO_ID_HERE
&quot; target=&quot;_blank&quot;&amp;gt;&amp;lt;img src=&quot;http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg&quot;
alt=&quot;IMAGE ALT TEXT HERE&quot; width=&quot;240&quot; height=&quot;180&quot; border=&quot;10&quot; /&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, in pure Markdown, but losing the image sizing and border:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-no-highlight&quot;&gt;[![IMAGE ALT TEXT HERE](http://img.youtube.com/vi/YOUTUBE_VIDEO_ID_HERE/0.jpg)](http://www.youtube.com/watch?v=YOUTUBE_VIDEO_ID_HERE)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Referencing a bug by #bugID in your git commit links it to the slip. For example #1.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;License: &lt;a href=&quot;https://creativecommons.org/licenses/by/3.0/&quot;&gt;CC-BY&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 02 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/02/markdown-cheatsheet.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/02/markdown-cheatsheet.html</guid>
        
        
      </item>
    
      <item>
        <title>Getting Started with Jekyll</title>
        <description>&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; can automatically generate and serve the website for you.
Let’s say you have a username/organisation &lt;code class=&quot;highlighter-rouge&quot;&gt;my-org&lt;/code&gt; and project &lt;code class=&quot;highlighter-rouge&quot;&gt;my-proj&lt;/code&gt;; if you locate Jekyll source under &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt; folder of master branch in your repo &lt;code class=&quot;highlighter-rouge&quot;&gt;github.com/my-org/my-proj&lt;/code&gt;, the website will be served on &lt;code class=&quot;highlighter-rouge&quot;&gt;my-org.github.io/my-proj&lt;/code&gt;.
The good thing about coupling your documentation with the source repo is, whenever you merge features with regarding content to master branch, it will also be published in the webpage instantly.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Just download the source from &lt;a href=&quot;https://github.com/janczizikow/sleek/&quot;&gt;github.com/janczizikow/sleek&lt;/a&gt; into your repo under &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt; folder.&lt;/li&gt;
  &lt;li&gt;Edit site settings in  &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file according to your project.&lt;/li&gt;
  &lt;li&gt;Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;favicon.ico&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;img/logonav.png&lt;/code&gt; with your own logo.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;writing-content&quot;&gt;Writing content&lt;/h2&gt;

&lt;h3 id=&quot;docs&quot;&gt;Docs&lt;/h3&gt;

&lt;p&gt;Docs are &lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt; of pages stored under &lt;code class=&quot;highlighter-rouge&quot;&gt;_docs&lt;/code&gt; folder. To create a new page:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; Create a new Markdown as &lt;code class=&quot;highlighter-rouge&quot;&gt;_docs/my-page.md&lt;/code&gt; and write &lt;a href=&quot;https://jekyllrb.com/docs/frontmatter/&quot;&gt;front matter&lt;/a&gt; &amp;amp; content such as:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
title: My Page
permalink: /docs/my-page/
---

Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; Add the pagename to &lt;code class=&quot;highlighter-rouge&quot;&gt;_pages/docs.yml&lt;/code&gt; file in order to list in docs navigation panel:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- title: My Group Title
  docs:
  - my-page
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;blog-posts&quot;&gt;Blog posts&lt;/h3&gt;

&lt;p&gt;Add a new Markdown file such as &lt;code class=&quot;highlighter-rouge&quot;&gt;2017-05-09-my-post.md&lt;/code&gt; and write the content similar to other post examples.&lt;/p&gt;

&lt;h3 id=&quot;pages&quot;&gt;Pages&lt;/h3&gt;

&lt;p&gt;The home page is located under &lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt; file. You can change the content or design completely different welcome page for your taste.&lt;/p&gt;

&lt;p&gt;In order to add a new page, create a new html or markdown file under root directory and link it in &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/header.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;images-todo&quot;&gt;Images TODO&lt;/h3&gt;

&lt;p&gt;Introduce gulp optimization&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Breakpoint&lt;/th&gt;
      &lt;th&gt;Image Type&lt;/th&gt;
      &lt;th&gt;Width&lt;/th&gt;
      &lt;th&gt;Retina&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xs&lt;/td&gt;
      &lt;td&gt;Post Thumb&lt;/td&gt;
      &lt;td&gt;535px&lt;/td&gt;
      &lt;td&gt;1070px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sm&lt;/td&gt;
      &lt;td&gt;Post Thumb&lt;/td&gt;
      &lt;td&gt;500px&lt;/td&gt;
      &lt;td&gt;1000px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;md&lt;/td&gt;
      &lt;td&gt;Post Thumb&lt;/td&gt;
      &lt;td&gt;329.375px&lt;/td&gt;
      &lt;td&gt;658.75px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lg&lt;/td&gt;
      &lt;td&gt;Post Thumb&lt;/td&gt;
      &lt;td&gt;445.625px&lt;/td&gt;
      &lt;td&gt;891.25px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xl&lt;/td&gt;
      &lt;td&gt;Post Thumb&lt;/td&gt;
      &lt;td&gt;353.125px&lt;/td&gt;
      &lt;td&gt;706.25px&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Breakpoint&lt;/th&gt;
      &lt;th&gt;Image Type&lt;/th&gt;
      &lt;th&gt;Width&lt;/th&gt;
      &lt;th&gt;Retina&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;xs&lt;/td&gt;
      &lt;td&gt;Post Hero&lt;/td&gt;
      &lt;td&gt;535px&lt;/td&gt;
      &lt;td&gt;1070px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;sm&lt;/td&gt;
      &lt;td&gt;Post Hero&lt;/td&gt;
      &lt;td&gt;500px&lt;/td&gt;
      &lt;td&gt;1000px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;md&lt;/td&gt;
      &lt;td&gt;Post Hero&lt;/td&gt;
      &lt;td&gt;329.375px&lt;/td&gt;
      &lt;td&gt;658.75px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lg&lt;/td&gt;
      &lt;td&gt;Post Hero&lt;/td&gt;
      &lt;td&gt;445.625px&lt;/td&gt;
      &lt;td&gt;891.25px&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;xl&lt;/td&gt;
      &lt;td&gt;Post Hero&lt;/td&gt;
      &lt;td&gt;353.125px&lt;/td&gt;
      &lt;td&gt;706.25px&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Happy hacking!&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Feb 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/02/01/getting-started.html</link>
        <guid isPermaLink="true">http://localhost:4000/2018/02/01/getting-started.html</guid>
        
        
      </item>
    
  </channel>
</rss>
